# -*- coding: utf-8 -*-
import pandas as pd
import numpy as np
import re, os, time
from tfidfindex import tfidfmodel, tfidfsimilarity
from cosindex import examplewordlist,cosindex
appleid2appid = {1105855019: 116215, 639516529: 17608, 791532221: 78, 654897098: 326, 850417475: 106612, 1108397779: 18156, 779561331: 10247, 841140063: 2377, 446324234: 223, 472885640: 335, 1086842482: 93606, 955396648: 1476, 1031897589: 5919, 852912420: 13506, 1053012308: 115551, 989673964: 356, 529479190: 993, 549105915: 15068, 909211092: 6696, 1027688889: 5337, 1143402987: 116078, 1015364140: 3807, 940547441: 3022, 895670960: 115766, 1033387365: 37182, 1099554323: 100778, 1042545880: 103754, 1219233424: 6216, 1235504705: 1127, 1028950091: 102208, 1112094262: 119792, 942937409: 4990, 1377058737: 8943, 1207199196: 10390, 1119087595: 125837, 1304987143: 124139, 1321803705: 124140, 1335578264: 2217, 1339079707: 10765, 1229073203: 124153, 1278212161: 8099, 1184823356: 8066, 1198096692: 124144, 1267701246: 24274, 1107529276: 5249, 1141273107: 125848, 1291245477: 124101, 1243986797: 586, 1260493742: 119308, 1232104244: 124143, 1186647303: 125838, 983122251: 123676, 1132257692: 123401, 1228038936: 125841, 996382259: 103937, 1187159855: 8073, 1144762402: 120343, 1174766830: 118296, 1166486511: 25265, 995122577: 550, 1071801856: 120246, 1068775369: 4028, 1191745543: 119679, 1115609641: 119793, 1156452083: 116666, 1098075090: 119790, 1170455562: 21453, 1141795249: 116947, 1171326248: 120274, 1149182335: 8180, 1048355267: 116790, 1174772776: 11485, 1174694004: 6818, 1119082248: 119641, 1142521181: 4859, 1106936921: 104426, 1096974019: 116106, 1117215687: 115982, 1163663148: 20244, 1116874634: 118439, 1097465856: 116005, 1146128499: 12173, 1115036996: 119390, 1117804004: 8231, 1088753863: 105901, 1138725547: 4388, 1061051095: 115650, 1115493982: 5605, 975447563: 36770, 1086981081: 107943, 1131595890: 6485, 1020167166: 115882, 1123406342: 118924, 1088150831: 100338, 1104855278: 104080, 1089336971: 115611, 1058370552: 15955, 1037959338: 4345, 973351657: 15353, 1093063463: 97876, 1001855348: 15519, 1120536875: 115514, 1109303593: 5655, 1112416523: 10460, 1102297707: 115586, 1038743400: 19301, 1094207590: 25945, 1106842267: 102933, 1089038738: 12588, 1104907987: 8128, 1102657935: 5033, 1095086466: 101229, 1070092192: 100552, 1027230451: 29222, 1088720922: 1670, 1066697625: 1180, 1056016385: 10905, 1071517766: 6503, 1068398844: 5865, 1057101569: 3279, 1073506457: 3766, 1010704842: 28451, 1052048518: 4154, 1080228940: 105596, 1040083067: 100724, 982428268: 27689, 1073870337: 3988, 1063956349: 8879, 1071360255: 3518, 1064367739: 12276, 1036661603: 100211, 977491503: 3304, 1068435609: 7539, 1023663634: 2559, 992352200: 3956, 1037420924: 105957, 1004691673: 11271, 958024475: 6692, 671464704: 9856, 1037198513: 3617, 990556801: 1283, 997636530: 5696, 1050018681: 6107, 1040491166: 2332, 989080154: 4032, 1033812632: 12188, 1017661438: 4428, 1037975766: 119469, 1027285438: 14619, 1014227673: 817, 1006605215: 4465, 999745003: 1594, 834393815: 120363, 981791837: 1578, 976916334: 11617, 1013756255: 8233, 967741086: 2274, 982175678: 7257, 930411024: 10327, 1012298403: 119934, 1011682252: 9130, 996785884: 13795, 973811791: 11002, 987360477: 11051, 966078986: 7056, 953435594: 105089, 954751394: 8296, 996509117: 255, 958022253: 941, 954252817: 853, 979859989: 6626, 979092836: 10646, 975823957: 15679, 985876886: 118752, 931857965: 12416, 983522106: 3772, 897779231: 17863, 958842876: 5235, 953358223: 4504, 904836838: 11206, 971978096: 2079, 958507857: 4269, 972012557: 1624, 963083092: 10127, 910395494: 4302, 948203056: 2630, 954198012: 4618, 829420004: 6766, 952174948: 102954, 945268584: 6119, 893116484: 15878, 918748440: 3876, 891186836: 1096, 945274928: 6963, 890386857: 8534, 932389062: 24555, 909351158: 12215, 837545884: 11265, 904737816: 18216, 911663964: 9637, 912657726: 10288, 878545253: 7128, 895745892: 7068, 824104400: 9156, 891582840: 6236, 869231055: 5254, 895015775: 14416, 918184600: 24007, 867465887: 3551, 897841116: 1611, 868692227: 12756, 901832505: 105813, 838804006: 115850, 897447840: 924, 714796093: 106150, 899492565: 12152, 896949185: 4513, 897894830: 1803, 876244647: 33376, 894979588: 9024, 899467421: 10094, 632437966: 16389, 875790902: 1962, 778342052: 3589, 899811420: 5339, 791111694: 2102, 886480366: 1607, 852978495: 5429, 656176278: 16998, 786031289: 7565, 880686976: 8047, 750931425: 11730, 863707458: 6992, 886566858: 5271, 791111522: 9330, 861156904: 115546, 874153886: 9356, 781137889: 6538, 792562062: 1715, 834878585: 102, 786857884: 2882, 718153412: 108764, 728293409: 3854, 737651307: 984, 797332251: 4793, 838193156: 108327, 824713678: 10984, 672150402: 1549, 820140906: 7830, 793077082: 14579, 698716187: 18145, 788412899: 10058, 747516887: 1546, 788406144: 3539, 806710859: 9511, 703585308: 8713, 792638268: 13683, 685890408: 16065, 790023126: 6547, 741535892: 11218, 731871690: 739, 680465449: 10962, 747314884: 6508, 696565994: 4259, 768114470: 4790, 698045238: 9004, 765375025: 8375, 660928091: 14860, 685860437: 7372, 700970012: 33824, 703327328: 4339, 727466621: 5061, 657500465: 513, 680514349: 1455, 730898004: 25505, 710369217: 10649, 638689075: 5974, 694996158: 10948, 583222866: 101756, 653350791: 434, 668317926: 13559, 672093597: 3215, 550923627: 10037, 673863614: 105795, 596402997: 2381, 639486670: 9341, 646640353: 19833, 556164350: 6682, 567198973: 18660, 606080169: 10469, 598860440: 10533, 593369632: 2709, 595831580: 3958, 579188627: 8409, 588286719: 5793, 595288528: 8321, 590216134: 118416, 556517961: 3913, 586481698: 6161, 554936514: 2649, 580437470: 14246, 564672254: 29318, 551905986: 24307, 520356600: 2827, 582138391: 9046, 509458284: 25937, 577731278: 10245, 564457517: 8700, 563443400: 2019, 522795042: 10973, 541044144: 9244, 548592311: 12351, 543097382: 2343, 510940882: 4958, 525458069: 19135, 550067264: 13615, 534453594: 1089, 506627515: 3741, 533383045: 19455, 493901993: 1081, 502799623: 5342, 516761043: 8683, 521030637: 13173, 522008813: 11113, 521988799: 4695, 521002734: 9157, 504785794: 9228, 510248724: 4703, 512402424: 1548, 483330461: 1787, 500619796: 8580, 504275369: 13996, 490939135: 7229, 502844118: 10479, 499791471: 14417, 491274558: 1877, 494856551: 5502, 414835676: 15909, 496009190: 7866, 491231653: 20699, 469027061: 2258, 462199252: 12029, 456532154: 20435, 462737588: 1016, 449735650: 2319, 457446957: 15180, 455160359: 8824, 434811130: 1396, 416345319: 5231, 403858572: 100795, 403941510: 989, 395979574: 7412, 377194688: 1277, 342994828: 2026, 307751675: 931}

perf_origin = pd.read_csv('perf_original_sub.csv',encoding = 'gbk')
version = pd.read_csv('versionwithfilename.csv', encoding = 'gbk')
binfo = pd.read_csv('baseinfo_averageperf.csv', encoding = 'gbk')
examplar = pd.read_csv('examplar.csv')

perf_addsimi = perf_origin
version['filename_r'] = version.filename.apply(lambda x: x.replace('.','_').replace('_txt','.txt'))


# 用于合并同一个id的文本的函数
def conbatfile(filelist, appleid):
    text = ''

    for file in filelist:
        try:
            with open(file, 'r', encoding='utf-8') as f:
                temp = f.read()
        except:
            temp = ''
        text = text + temp
    return text.replace(str(appleid), '')

def genDate(startyear=2017,endyear = 2018,breakMark = '-',howlong =12):
    months = ['01','02','03','04','05','06','07','08','09','10','11','12']
    dates = []
    for year in range(startyear,endyear+1):
        for month in months:
            date = breakMark.join([str(year),month,'01'])
            dates.append(date)
    timestamps = []
    for date in dates:
        timeArray = time.strptime(date, "%Y-%m-%d")
        timestamp = time.mktime(timeArray)
        timestamps.append(timestamp)
    return timestamps[:howlong]

def getfile(appleid,endtime,versiondf, starttime = 0, addintro = True):
    subdf = versiondf[(versiondf['appleid'] == appleid) & (versiondf['datestamp']<endtime) & (versiondf['datestamp']>starttime)]
    filelist = subdf['filename_r'].values.tolist()
    text = conbatfile(filelist,appleid)
    if addintro:
        with open('intro/{}intro.txt'.format(str(int(appleid))),'r',encoding = 'utf-8') as f:
            intro = f.read()
            text = text +intro
        text = text.replace(str(appleid),'')
    return text


duringtime = genDate()
simidf = pd.DataFrame()


examplarlist = examplar['examplar'].dropna().values.tolist()
followerlist = binfo[binfo['examplar_candidate'] == 0]['appleid'].values.tolist()



followerappidlist = [appleid2appid[appleid] for appleid in followerlist]
df = pd.DataFrame()
for i in range(len(duringtime)):
    endtime = duringtime[i]
    if i == 0:
        starttime = 0
    else:
        starttime = duringtime[i - 1]
    # 获取examplar和follower原文
    examplar_text_list = [getfile(appleid, endtime, version) for appleid in examplarlist]
    # 根据exammplar算出模型
    tfidf_para = tfidfmodel(examplar_text_list)
    cos_para = examplewordlist(examplar_text_list)
    #计算每个follower与examplar的相似度
    for appleid in followerlist:
        appid = appleid2appid[appleid]
        tempfollowerfile = getfile(appleid, endtime, version)
        tempfollowerfile_incre = getfile(appleid, endtime, version, starttime, False)
        tfidf_sim = tfidfsimilarity(tempfollowerfile, tfidf_para)
        cos_sim = cosindex(tempfollowerfile, cos_para)
        tfidf_sim_incre = tfidfsimilarity(tempfollowerfile_incre, tfidf_para)
        cos_sim_incre = cosindex(tempfollowerfile_incre, cos_para)
        tempdict = {}
        for t in range(len(examplarlist)):
            tempdict['{}tf'.format(examplarlist[t])] = tfidf_sim[t]
            tempdict['{}cos'.format(examplarlist[t])] = cos_sim[t]
            tempdict['{}tf_incre'.format(examplarlist[t])] = tfidf_sim_incre[t]
            tempdict['{}cos_incre'.format(examplarlist[t])] = cos_sim_incre[t]
        tempdict['timestamp'] = endtime
        tempdict['appleid'] = appleid
        tempdict['appid'] = appid
        tempdf = pd.DataFrame([tempdict])
        df = df.append(tempdf)
df.to_csv('simtable.csv')


df2 = pd.DataFrame()
endtime = 0
starttime = 0

# 获取examplar和follower原文
examplar_text_list = [getfile(appleid, endtime, version) for appleid in examplarlist]
# 根据exammplar算出模型
tfidf_para = tfidfmodel(examplar_text_list)
cos_para = examplewordlist(examplar_text_list)
#计算每个follower与examplar的相似度
for appleid in followerlist:
    appid = appleid2appid[appleid]
    tempfollowerfile = getfile(appleid, endtime, version)
    tfidf_sim = tfidfsimilarity(tempfollowerfile, tfidf_para)
    cos_sim = cosindex(tempfollowerfile, cos_para)
    tempdict = {}
    for t in range(len(examplarlist)):
        tempdict['{}tf'.format(examplarlist[t])] = tfidf_sim[t]
        tempdict['{}cos'.format(examplarlist[t])] = cos_sim[t]
    tempdict['appleid'] = appleid
    tempdict['appid'] = appid
    tempdf = pd.DataFrame([tempdict])
    df2 = df2.append(tempdf)
df2.to_csv('introsim.csv')
